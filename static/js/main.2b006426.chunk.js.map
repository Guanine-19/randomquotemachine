{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QuoteBox","id","class","this","props","quote","author","React","Component","App","state","randQuote","readQuotes","isLoading","randIndex","error","nextQuote","bind","previousQuote","fetch","then","response","json","setState","quotes","catch","concat","Math","floor","random","length","window","pop","fetchQuotes","message","Spinner","animation","variant","Button","onClick","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b006426.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nclass QuoteBox extends React.Component {\n  render(){\n    return(\n      <div id=\"quoteTainer\" class=\"animated fadeIn\">\n        <hr />\n        <h2 id=\"text\">{this.props.quote.quote}</h2>\n        <h3 id=\"author\">{this.props.quote.author}</h3>\n        <hr />\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      randQuote: [],\n      readQuotes: [],\n      isLoading: true,\n      randIndex: 0,\n      error: null\n    }\n\n    this.nextQuote = this.nextQuote.bind(this);\n    this.previousQuote = this.previousQuote.bind(this);\n  }\n\n  fetchQuotes() {\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    .then(response=> response.json())\n    .then(response => this.setState({randQuote: response.quotes, isLoading: false}))\n    .then(()=>this.nextQuote())\n    .catch(error => this.setState({error, isLoading: false}))\n  }\n  \n  nextQuote() {\n    this.setState({\n      readQuotes: this.state.readQuotes.concat(this.state.randIndex),\n      randIndex: Math.floor(Math.random()*this.state.randQuote.length)\n    })\n    window[\"changeBackground\"]();\n  }\n\n  previousQuote() {\n    if (this.state.readQuotes.length>1){\n      this.setState({\n        randIndex: this.state.readQuotes.pop()\n      })\n    }\n    window[\"changeBackground\"]();\n  }\n\n  componentDidMount() {\n    this.fetchQuotes();\n  }\n\n  render(){\n    const {randQuote, randIndex, isLoading, error} = this.state;\n    return(\n        <div id=\"quote-box\" class=\"jumbotron animated fadeIn mx-auto justify-content-center\">\n        <div class=\"row\">\n            <h1 class=\"display-4\">Here's a Random Quote:</h1>\n            <hr />\n            {error? <p>{error.message}</p>: null}\n            {!isLoading? \n            <QuoteBox quote={randQuote[randIndex]} class=\"lead\"/>\n            : <Spinner animation=\"border\" variant=\"dark\" />\n          }\n        </div>\n        <div class=\"row\">\n          <div class=\"col-7\">\n            <Button variant=\"light\" onClick={this.previousQuote}><i class=\"fas fa-arrow-alt-circle-left\"></i> Previous</Button>\n            <Button id=\"new-quote\" variant=\"dark\" onClick={this.nextQuote}><i class=\"far fa-arrow-alt-circle-right\"></i> Next</Button>\n          </div>\n          <div class=\"col-5\"><p>Share on Twitter <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\"><i class=\"fab fa-twitter\"></i></a></p></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}